import * as React from 'react';
import { IconNext, IconPrev, MonthsDropdown, YearsDropdown } from '../../components';
import { useDayPicker, useNavigation } from '../../hooks';
import { UIElement as UI } from '../../types';
/**
 * Render the caption of a month, which includes title and navigation buttons.
 * The caption has a different layout when setting the `numberOfMonths` prop.
 */
export function Caption(props) {
    var displayMonth = props.displayMonth, isFirst = props.isFirst, isLast = props.isLast, isBetween = props.isBetween;
    var _a = useDayPicker(), dir = _a.dir, classNames = _a.classNames, styles = _a.styles, captionLayout = _a.captionLayout, locale = _a.locale, numberOfMonths = _a.numberOfMonths, onMonthChange = _a.onMonthChange, labels = _a.labels, formatCaption = _a.formatters.formatCaption, disableNavigation = _a.disableNavigation;
    var _b = useNavigation(), prevMonth = _b.prevMonth, nextMonth = _b.nextMonth;
    var onPrevClick = function (e) {
        if (!prevMonth)
            return;
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(prevMonth, e);
    };
    var onNextClick = function (e) {
        if (!nextMonth)
            return;
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(nextMonth, e);
    };
    var prevButton = (React.createElement("button", { key: "prev", "aria-label": prevMonth && labels.prevLabel(prevMonth, { locale: locale }), className: [classNames[UI.NavButton], classNames[UI.NavButtonPrev]].join(' '), disabled: !prevMonth, onClick: dir === 'rtl' ? onNextClick : onPrevClick, style: styles === null || styles === void 0 ? void 0 : styles[UI.NavButtonPrev] },
        React.createElement(IconPrev, { className: classNames[UI.NavIcon], style: styles === null || styles === void 0 ? void 0 : styles[UI.NavIcon] })));
    var nextButton = (React.createElement("button", { key: "next", "aria-label": nextMonth && labels.nextLabel(nextMonth, { locale: locale }), className: [classNames[UI.NavButton], classNames[UI.NavButtonNext]].join(' '), disabled: !nextMonth, onClick: dir === 'rtl' ? onPrevClick : onNextClick, style: styles === null || styles === void 0 ? void 0 : styles[UI.NavButtonNext] },
        React.createElement(IconNext, { className: classNames[UI.NavIcon], style: styles === null || styles === void 0 ? void 0 : styles[UI.NavIcon] })));
    var caption = (React.createElement("div", { key: "caption", className: classNames[UI.CaptionLabel], "aria-live": "polite" }, formatCaption(displayMonth, { locale: locale })));
    var buttons = [prevButton, nextButton];
    if (dir === 'rtl')
        buttons.reverse();
    if (isFirst)
        buttons = [prevButton]; // show only the prev button"
    if (isLast)
        buttons = [nextButton]; // show only the next button"
    if (isBetween)
        buttons = []; // do not show buttons at all
    var nav = (React.createElement("span", { key: "nav", className: classNames[UI.Nav], style: styles === null || styles === void 0 ? void 0 : styles[UI.Nav] }, buttons));
    return (React.createElement("div", { className: classNames[UI.Caption], style: styles === null || styles === void 0 ? void 0 : styles[UI.Caption] }, disableNavigation ? (caption) : (React.createElement(React.Fragment, null,
        captionLayout === 'dropdown' && (React.createElement("div", { className: classNames[UI.CaptionDropdowns], style: styles === null || styles === void 0 ? void 0 : styles[UI.CaptionDropdowns] },
            React.createElement(MonthsDropdown, { displayMonth: displayMonth }),
            React.createElement(YearsDropdown, { displayMonth: displayMonth }))),
        captionLayout === 'buttons' &&
            numberOfMonths === 1 && [caption, nav],
        captionLayout === 'buttons' && isFirst && [nav, caption],
        captionLayout === 'buttons' && isLast && [caption, nav],
        captionLayout === 'buttons' && isBetween && caption))));
}
//# sourceMappingURL=Caption.js.map