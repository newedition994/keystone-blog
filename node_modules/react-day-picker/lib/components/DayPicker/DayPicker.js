var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useState } from 'react';
import { addDays, addWeeks, isAfter, isBefore, isSameMonth, startOfMonth } from 'date-fns';
import { Root } from '../../components';
import { useSelect } from '../../hooks';
import { useRangeSelect } from '../../hooks/useRangeSelect';
import { useMultipleSelect } from '../../hooks/useSelectMultiple';
import { KeyCode } from '../../types';
import { DayPickerContext } from './DayPickerContext';
import { defaultContext as defaults } from './defaults/defaultContext';
import { NavigationContext } from './NavigationContext';
import { getMonthsToRender } from './utils/getMonthsToRender';
import { getNavMonths } from './utils/getNavMonths';
/**
 * Render the date picker component.
 */
export function DayPicker(props) {
    var _a, _b;
    //#region Default values
    var mode = (_a = props.mode) !== null && _a !== void 0 ? _a : defaults.mode;
    var today = (_b = props.today) !== null && _b !== void 0 ? _b : defaults.today;
    var locale = props.locale || defaults.locale;
    var numberOfMonths = props.numberOfMonths || defaults.numberOfMonths;
    var showOutsideDays = props.showOutsideDays || props.fixedWeeks;
    var modifierPrefix = props.modifierPrefix || defaults.modifierPrefix;
    // Give precedence to `fromYear` and `fromMonth`
    var fromDate = props.fromDate;
    if (props.fromMonth)
        fromDate = startOfMonth(props.fromMonth);
    else if (props.fromYear)
        fromDate = new Date(props.fromYear, 0, 1);
    // Give precedence to `toYear` and `toMonth`
    var toDate = props.toDate;
    if (props.toMonth)
        toDate = startOfMonth(props.toMonth);
    else if (props.toYear)
        toDate = new Date(props.toYear, 11, 31);
    var captionLayout = props.captionLayout || defaults.captionLayout;
    if (captionLayout === 'dropdown' &&
        ((!fromDate && !toDate) || numberOfMonths > 1)) {
        captionLayout = 'buttons';
    }
    //#endregion
    //#region Current month
    // As default, month is controlled by DayPicker, where the initial value is
    // `defaultMonth`. If props.month is passed, then the parent component must
    // control the month via `onMonthChange`.
    var _c = useState(!('month' in props)), isMonthControlled = _c[0], setIsMonthControlled = _c[1];
    var _d = useState(props.defaultMonth ? startOfMonth(props.defaultMonth) : undefined), controlledMonth = _d[0], setControlledMonth = _d[1];
    React.useEffect(function () {
        setIsMonthControlled(!('month' in props));
    }, [props.defaultMonth]);
    var currentMonth = controlledMonth || props.month || startOfMonth(today);
    var displayMonths = getMonthsToRender(currentMonth, numberOfMonths, {
        toDate: toDate,
        fromDate: fromDate,
        reverseMonths: props.reverseMonths
    });
    //#endregion
    //#region Controlled selection
    // Single select
    var singleSelect = useSelect('single', props.defaultSelected, props.required, props.onSelect);
    // Multiple select
    var multipleSelect = useMultipleSelect('multiple', props.defaultSelected, props.required, props.onSelectMultiple);
    var rangeSelect = useRangeSelect('range', props.defaultSelected, props.required, props.onSelectRange);
    var selected = mode === 'single'
        ? singleSelect.selected
        : mode === 'multiple'
            ? multipleSelect.selected
            : mode === 'range'
                ? rangeSelect.selected
                : props.selected;
    //#endregion
    //#region Focused day
    var _e = useState(), focusedDay = _e[0], setFocusedDay = _e[1];
    //#endregion
    //#region From/to date
    //#endregion
    //#region events
    var onMonthChange = function (newMonth, e) {
        var _a;
        // Do nothing if outside of range
        if (toDate && isAfter(newMonth, startOfMonth(toDate)))
            return;
        if (fromDate && isBefore(newMonth, startOfMonth(fromDate)))
            return;
        if (isMonthControlled)
            setControlledMonth(newMonth);
        (_a = props.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(props, newMonth, e);
    };
    var onDayFocus = function (day, modifiers, e) {
        var _a;
        var sameMonth = isSameMonth(day, currentMonth);
        if (!sameMonth && props.disableNavigation)
            return;
        if (!sameMonth)
            onMonthChange(startOfMonth(day), e);
        setFocusedDay(day);
        (_a = props.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayBlur = function (day, modifiers, e) {
        var _a;
        setFocusedDay(undefined);
        (_a = props.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayClick = function (day, modifiers, e) {
        var _a;
        (_a = props.onDayClick) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
        if (modifiers.outside && !props.enableOutsideDaysClick)
            return;
        if (modifiers.outside)
            setControlledMonth(startOfMonth(day));
        if (mode === 'single')
            singleSelect.onDayClick(day, modifiers, e);
        if (mode === 'multiple')
            multipleSelect.onDayClick(day, modifiers, e);
        if (mode === 'range')
            rangeSelect.onDayClick(day, modifiers, e);
    };
    var onDayKeyDown = function (day, modifiers, e) {
        var _a;
        switch (e.key) {
            case KeyCode.ArrowLeft: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = addDays(day, -1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                break;
            }
            case KeyCode.ArrowRight: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = addDays(day, 1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                return;
            }
            case KeyCode.ArrowUp: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = addWeeks(day, -1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                break;
            }
            case KeyCode.ArrowDown: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = addWeeks(day, 1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                break;
            }
        }
        (_a = props.onDayKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    //#endregion
    var propsValues = __assign(__assign({}, props), { captionLayout: captionLayout, classNames: __assign(__assign({}, defaults.classNames), props.classNames), components: __assign(__assign({}, defaults.components), props.components), formatters: __assign(__assign({}, defaults.formatters), props.formatters), labels: __assign(__assign({}, defaults.labels), props.labels), modifiers: __assign(__assign({}, defaults.modifiers), props.modifiers), fromDate: fromDate,
        toDate: toDate,
        locale: locale,
        modifierPrefix: modifierPrefix,
        numberOfMonths: numberOfMonths,
        onDayBlur: onDayBlur,
        onDayClick: onDayClick,
        onDayFocus: onDayFocus,
        onDayKeyDown: onDayKeyDown,
        onMonthChange: onMonthChange,
        selected: selected,
        showOutsideDays: showOutsideDays,
        today: today, originalProps: props });
    var _f = getNavMonths(currentMonth, {
        fromDate: fromDate,
        toDate: toDate,
        pagedNavigation: props.pagedNavigation,
        numberOfMonths: numberOfMonths,
        disableNavigation: props.disableNavigation
    }), prevMonth = _f[0], nextMonth = _f[1];
    var navigationValues = {
        nextMonth: nextMonth,
        prevMonth: prevMonth,
        currentMonth: currentMonth,
        displayMonths: displayMonths,
        focusedDay: focusedDay
    };
    return (React.createElement(DayPickerContext.Provider, { value: propsValues },
        React.createElement(NavigationContext.Provider, { value: navigationValues },
            React.createElement(Root, null))));
}
//# sourceMappingURL=DayPicker.js.map