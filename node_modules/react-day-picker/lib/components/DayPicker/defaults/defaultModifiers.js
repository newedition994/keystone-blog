/*

The default modifiers matchers assigned to every day. These values are passed to
the `defaultModifiers` prop in DayPicker.tsx.

*/
import { isAfter, isBefore, isSameDay, isSameMonth } from 'date-fns';
/** Determines if a day is outside the displayed month.  */
function isOutside(day, displayMonth) {
    return !isSameMonth(day, displayMonth);
}
/** Determines if a day, when displayed in a month, is interactive.  */
function isInteractive(day, displayMonth, props) {
    var toDate = props.toDate, fromDate = props.fromDate, enableOutsideDaysClick = props.enableOutsideDaysClick, originalProps = props.originalProps;
    var outside = isOutside(day, displayMonth);
    if (props.mode !== 'uncontrolled' && !outside) {
        return true;
    }
    var hasInteractiveProps = 'onDayClick' in originalProps;
    if (props.mode !== 'uncontrolled') {
        return true;
    }
    else if (hasInteractiveProps) {
        return true;
    }
    // The day is NOT interactive if not in the range specified in the `fromDate`
    // and `toDate` (these values are set also by `fromDay/toDay` and
    // `fromYear/toYear` in the main component.)
    var isAfterToDate = Boolean(toDate && isAfter(day, toDate));
    var isBeforeFromDate = Boolean(fromDate && isBefore(day, fromDate));
    var isOutsideInteractive = outside
        ? Boolean(enableOutsideDaysClick)
        : false;
    var interactive = !isAfterToDate && !isBeforeFromDate && isOutsideInteractive;
    return interactive;
}
/** Determines if a day is "today". */
function isToday(day, _, props) {
    // User can change the "today" date from props, thus we cannot rely to the
    // date now. The today props defaults to `new Date()` anyway...
    return isSameDay(day, props.today);
}
export var defaultModifiers = {
    interactive: isInteractive,
    outside: isOutside,
    today: isToday
};
//# sourceMappingURL=defaultModifiers.js.map