import * as React from 'react';
import { setYear, startOfYear } from 'date-fns';
import { useDayPicker } from '../../hooks';
import { UIElement } from '../../types';
/**
 * Render a dropdown to change the year. Take in account the `fromDate` and
 * `toDate` from context.
 */
export function YearsDropdown(props) {
    var displayMonth = props.displayMonth;
    var _a = useDayPicker(), locale = _a.locale, onMonthChange = _a.onMonthChange, fromDate = _a.fromDate, toDate = _a.toDate, classNames = _a.classNames, styles = _a.styles, Dropdown = _a.components.Dropdown, formatYearCaption = _a.formatters.formatYearCaption;
    var years = [];
    if (fromDate && toDate) {
        for (var year = fromDate.getFullYear(); year <= toDate.getFullYear(); year++) {
            var anyDate = new Date(); // any date is OK, we just need the year
            years.push(setYear(startOfYear(anyDate), year));
        }
    }
    var handleChange = function (e) {
        var newMonth = new Date(displayMonth);
        newMonth.setFullYear(Number(e.target.value));
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(newMonth, e);
    };
    return (React.createElement(Dropdown, { className: classNames[UIElement.DropdownMonth], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.DropdownMonth], onChange: handleChange, value: displayMonth.getMonth(), caption: formatYearCaption(displayMonth, { locale: locale }) }, years.map(function (year) { return (React.createElement("option", { key: year.getFullYear(), value: year.getFullYear() }, formatYearCaption(year, { locale: locale }))); })));
}
//# sourceMappingURL=YearsDropdown.js.map