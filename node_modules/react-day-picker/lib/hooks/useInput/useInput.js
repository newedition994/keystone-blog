import * as React from 'react';
import { format, parse } from 'date-fns';
/**
 * @private
 */
function isValidDate(day) {
    return !isNaN(day.getTime());
}
/**
 * Return the props for binding an input field with DayPicker.
 *
 * **Example**
 *
 * ```
 * function Example() {
 *   const { dayPickerProps, inputProps } = useInput(new Date(), 'yyyy-MM-dd');
 *   return (
 *     <>
 *       <p>
 *         Type a day or pick one from the calendar:
 *         <input {...inputProps} placeholder="YYYY-MM-DD" />
 *       </p>
 *       <DayPicker {...dayPickerProps} />
 *     </>
 *   );
 * }
 * ```
 */
export function useInput(initialDay, formatStr, options) {
    var _a;
    // Defaults from options
    var locale = options === null || options === void 0 ? void 0 : options.locale;
    var required = (_a = options === null || options === void 0 ? void 0 : options.required) !== null && _a !== void 0 ? _a : false;
    // Shortcut to the DateFns functions
    var formatDay = function (day) { return format(day, formatStr, { locale: locale }); };
    var parseValue = function (value) {
        return parse(value, formatStr, new Date(), { locale: locale });
    };
    // The initial value of the input field
    var initialValue = initialDay ? formatDay(initialDay) : '';
    // Initialize state
    var _b = React.useState(initialDay), selected = _b[0], setSelected = _b[1];
    var _c = React.useState(initialValue), value = _c[0], setValue = _c[1];
    var _d = React.useState(initialDay !== null && initialDay !== void 0 ? initialDay : new Date()), month = _d[0], setMonth = _d[1];
    var onDayClick = function (day) {
        setSelected(day);
        setValue(formatDay(day));
    };
    var onMonthChange = function (month) {
        setMonth(month);
    };
    // When changing the input field, save its value in state and check if the
    // string is a valid date. If it is a valid day, set it as selected and update
    // the calendarâ€™s month.
    var onChange = function (e) {
        setValue(e.target.value);
        var day = parseValue(e.target.value);
        if (!isValidDate(day)) {
            setSelected(undefined);
            return;
        }
        setSelected(day);
        setMonth(day);
    };
    // Special case for _required_ fields: on blur, if the value of the input is not
    // a valid date, reset the calendar and the input value.
    var onBlur = function (e) {
        var _a;
        var day = parseValue(e.target.value);
        if ((_a = !required) !== null && _a !== void 0 ? _a : isValidDate(day)) {
            return;
        }
        setSelected(initialDay);
        setMonth(initialDay !== null && initialDay !== void 0 ? initialDay : new Date());
        setValue(initialValue !== null && initialValue !== void 0 ? initialValue : '');
    };
    // When focusing, make sure DayPicker visualizes the month of the date in the
    // input field.
    var onFocus = function (e) {
        if (e.target.value) {
            var day = parseValue(e.target.value);
            if (isValidDate(day)) {
                setMonth(day);
            }
            return;
        }
        setSelected(initialDay);
        setMonth(initialDay !== null && initialDay !== void 0 ? initialDay : new Date());
        setValue(initialValue !== null && initialValue !== void 0 ? initialValue : '');
    };
    return {
        setMonth: setMonth,
        setValue: setValue,
        dayPickerProps: {
            month: month,
            selected: selected,
            onDayClick: onDayClick,
            onMonthChange: onMonthChange,
            mode: 'uncontrolled'
        },
        inputProps: {
            value: value,
            onChange: onChange,
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}
//# sourceMappingURL=useInput.js.map