(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("date-fns"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "date-fns"], factory);
	else if(typeof exports === 'object')
		exports["DayPicker"] = factory(require("react"), require("date-fns"));
	else
		root["DayPicker"] = factory(root["React"], root["DateFns"]);
})(self, function(__WEBPACK_EXTERNAL_MODULE__584__, __WEBPACK_EXTERNAL_MODULE__259__) {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 348:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildFormatLongFn;

function buildFormatLongFn(args) {
  return function (dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

module.exports = exports.default;

/***/ }),

/***/ 738:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildLocalizeFn;

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

module.exports = exports.default;

/***/ }),

/***/ 653:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildMatchFn;

function buildMatchFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;

    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = findIndex(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}

module.exports = exports.default;

/***/ }),

/***/ 604:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildMatchPatternFn;

function buildMatchPatternFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);

    if (!parseResult) {
      return null;
    }

    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

module.exports = exports.default;

/***/ }),

/***/ 361:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = formatDistance;
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}

module.exports = exports.default;

/***/ }),

/***/ 780:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(348));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: (0, _index.default)({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: (0, _index.default)({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0, _index.default)({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
var _default = formatLong;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 663:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = formatRelative;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}

module.exports = exports.default;

/***/ }),

/***/ 350:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(738));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
}

var localize = {
  ordinalNumber: ordinalNumber,
  era: (0, _index.default)({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0, _index.default)({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0, _index.default)({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: (0, _index.default)({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0, _index.default)({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
var _default = localize;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 49:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(604));

var _index2 = _interopRequireDefault(__webpack_require__(653));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: (0, _index.default)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: (0, _index2.default)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0, _index2.default)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: (0, _index2.default)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0, _index2.default)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0, _index2.default)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
var _default = match;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 626:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(361));

var _index2 = _interopRequireDefault(__webpack_require__(780));

var _index3 = _interopRequireDefault(__webpack_require__(663));

var _index4 = _interopRequireDefault(__webpack_require__(350));

var _index5 = _interopRequireDefault(__webpack_require__(49));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale = {
  code: 'en-US',
  formatDistance: _index.default,
  formatLong: _index2.default,
  formatRelative: _index3.default,
  localize: _index4.default,
  match: _index5.default,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
var _default = locale;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 259:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__259__;

/***/ }),

/***/ 584:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__584__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Caption": () => (/* reexport */ Caption),
  "Day": () => (/* reexport */ Day),
  "DayPicker": () => (/* reexport */ DayPicker),
  "DayPickerContext": () => (/* reexport */ DayPickerContext),
  "Dropdown": () => (/* reexport */ Dropdown),
  "Head": () => (/* reexport */ Head),
  "IconDropdown": () => (/* reexport */ IconDropdown),
  "IconNext": () => (/* reexport */ IconNext),
  "IconPrev": () => (/* reexport */ IconPrev),
  "KeyCode": () => (/* reexport */ KeyCode),
  "MonthsDropdown": () => (/* reexport */ MonthsDropdown),
  "NavigationContext": () => (/* reexport */ NavigationContext),
  "Root": () => (/* reexport */ Root),
  "Row": () => (/* reexport */ Row),
  "Table": () => (/* reexport */ Table),
  "UIElement": () => (/* reexport */ UIElement),
  "WeekNumber": () => (/* reexport */ WeekNumber),
  "YearsDropdown": () => (/* reexport */ YearsDropdown),
  "getModifiersStatus": () => (/* reexport */ getModifiersStatus),
  "useDayPicker": () => (/* reexport */ useDayPicker),
  "useInput": () => (/* reexport */ useInput),
  "useNavigation": () => (/* reexport */ useNavigation),
  "useSelect": () => (/* reexport */ useSelect)
});

// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__(584);
var external_root_React_commonjs2_react_commonjs_react_amd_react_default = /*#__PURE__*/__webpack_require__.n(external_root_React_commonjs2_react_commonjs_react_amd_react_);
// EXTERNAL MODULE: external {"root":"DateFns","commonjs2":"date-fns","commonjs":"date-fns","amd":"date-fns"}
var external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_ = __webpack_require__(259);
;// CONCATENATED MODULE: ./src/hooks/useInput/useInput.ts


/**
 * @private
 */
function isValidDate(day) {
    return !isNaN(day.getTime());
}
/**
 * Return the props for binding an input field with DayPicker.
 *
 * **Example**
 *
 * ```
 * function Example() {
 *   const { dayPickerProps, inputProps } = useInput(new Date(), 'yyyy-MM-dd');
 *   return (
 *     <>
 *       <p>
 *         Type a day or pick one from the calendar:
 *         <input {...inputProps} placeholder="YYYY-MM-DD" />
 *       </p>
 *       <DayPicker {...dayPickerProps} />
 *     </>
 *   );
 * }
 * ```
 */
function useInput(initialDay, formatStr, options) {
    var _a;
    // Defaults from options
    var locale = options === null || options === void 0 ? void 0 : options.locale;
    var required = (_a = options === null || options === void 0 ? void 0 : options.required) !== null && _a !== void 0 ? _a : false;
    // Shortcut to the DateFns functions
    var formatDay = function (day) { return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(day, formatStr, { locale: locale }); };
    var parseValue = function (value) {
        return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.parse)(value, formatStr, new Date(), { locale: locale });
    };
    // The initial value of the input field
    var initialValue = initialDay ? formatDay(initialDay) : '';
    // Initialize state
    var _b = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialDay), selected = _b[0], setSelected = _b[1];
    var _c = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialValue), value = _c[0], setValue = _c[1];
    var _d = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialDay !== null && initialDay !== void 0 ? initialDay : new Date()), month = _d[0], setMonth = _d[1];
    var onDayClick = function (day) {
        setSelected(day);
        setValue(formatDay(day));
    };
    var onMonthChange = function (month) {
        setMonth(month);
    };
    // When changing the input field, save its value in state and check if the
    // string is a valid date. If it is a valid day, set it as selected and update
    // the calendar’s month.
    var onChange = function (e) {
        setValue(e.target.value);
        var day = parseValue(e.target.value);
        if (!isValidDate(day)) {
            setSelected(undefined);
            return;
        }
        setSelected(day);
        setMonth(day);
    };
    // Special case for _required_ fields: on blur, if the value of the input is not
    // a valid date, reset the calendar and the input value.
    var onBlur = function (e) {
        var _a;
        var day = parseValue(e.target.value);
        if ((_a = !required) !== null && _a !== void 0 ? _a : isValidDate(day)) {
            return;
        }
        setSelected(initialDay);
        setMonth(initialDay !== null && initialDay !== void 0 ? initialDay : new Date());
        setValue(initialValue !== null && initialValue !== void 0 ? initialValue : '');
    };
    // When focusing, make sure DayPicker visualizes the month of the date in the
    // input field.
    var onFocus = function (e) {
        if (e.target.value) {
            var day = parseValue(e.target.value);
            if (isValidDate(day)) {
                setMonth(day);
            }
            return;
        }
        setSelected(initialDay);
        setMonth(initialDay !== null && initialDay !== void 0 ? initialDay : new Date());
        setValue(initialValue !== null && initialValue !== void 0 ? initialValue : '');
    };
    return {
        setMonth: setMonth,
        setValue: setValue,
        dayPickerProps: {
            month: month,
            selected: selected,
            onDayClick: onDayClick,
            onMonthChange: onMonthChange,
            mode: 'uncontrolled'
        },
        inputProps: {
            value: value,
            onChange: onChange,
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}

;// CONCATENATED MODULE: ./src/hooks/useInput/index.ts


;// CONCATENATED MODULE: ./src/hooks/useSelect/useSelect.ts

function useSelect(mode, defaultValue, required, callback) {
    if (required === void 0) { required = false; }
    var initialValue = mode === 'single' && defaultValue ? defaultValue : undefined;
    var _a = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue), selected = _a[0], setSelected = _a[1];
    var onDayClick = function (day, modifiers, e) {
        if (modifiers.selected) {
            if (!required) {
                setSelected(undefined);
                callback === null || callback === void 0 ? void 0 : callback(undefined, day, modifiers, e);
            }
            return;
        }
        setSelected(day);
        callback === null || callback === void 0 ? void 0 : callback(day, day, modifiers, e);
    };
    var reset = function () {
        setSelected(initialValue);
    };
    return { selected: selected, onDayClick: onDayClick, reset: reset };
}

;// CONCATENATED MODULE: ./src/hooks/useSelect/index.ts


;// CONCATENATED MODULE: ./src/hooks/useNavigation/useNavigation.ts


/**
 * Returns the Navigation context used for navigating between months and days.
 */
function useNavigation() {
    return external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(NavigationContext);
}

;// CONCATENATED MODULE: ./src/hooks/useNavigation/index.ts


;// CONCATENATED MODULE: ./src/hooks/useRangeSelect/utils/addToRange.ts

/**
 * Add a day to an existing range.
 *
 * The returned range takes in account the `undefined` values and if the added
 * day is already present in the range.
 */
function addToRange(day, range, required) {
    if (required === void 0) { required = false; }
    var _a = range || {}, from = _a.from, to = _a.to;
    if (!from) {
        return { from: day };
    }
    if (!required && !to && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(from, day)) {
        return undefined;
    }
    if (!to && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isBefore)(day, from)) {
        return { from: day, to: from };
    }
    if (!to) {
        return { from: from, to: day };
    }
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(to, day)) {
        return { from: to };
    }
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isAfter)(from, day)) {
        return { from: day, to: to };
    }
    return { from: from, to: day };
}

;// CONCATENATED MODULE: ./src/hooks/useRangeSelect/useRangeSelect.ts


/**
 * Return values and functions to handle range selection.
 */
function useRangeSelect(mode, defaultValue, required, callback) {
    if (required === void 0) { required = false; }
    var initialValue = mode === 'range' && defaultValue ? defaultValue : undefined;
    var _a = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue), selected = _a[0], setSelected = _a[1];
    var onDayClick = function (day, modifiers, e) {
        setSelected(function (currentValue) {
            var newValue = addToRange(day, currentValue, required);
            callback === null || callback === void 0 ? void 0 : callback(newValue, day, modifiers, e);
            setSelected(newValue);
            return newValue;
        });
        return;
    };
    var reset = function () {
        setSelected(initialValue || undefined);
    };
    return { selected: selected, onDayClick: onDayClick, reset: reset };
}

;// CONCATENATED MODULE: ./src/hooks/useRangeSelect/index.ts


;// CONCATENATED MODULE: ./src/hooks/useSelectMultiple/useSelectMultiple.ts
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};


function useMultipleSelect(mode, defaultValue, required, callback) {
    if (required === void 0) { required = false; }
    var initialValue = mode === 'multiple' && defaultValue ? defaultValue : [];
    var _a = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue), selected = _a[0], setSelected = _a[1];
    var onDayClick = function (day, modifiers, e) {
        setSelected(function (currentValue) {
            var newValue = __spreadArrays(currentValue);
            if (modifiers.selected) {
                if (required && currentValue.length === 1) {
                    return newValue;
                }
                var index = currentValue.findIndex(function (value) { return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, value); });
                newValue.splice(index, 1);
            }
            else {
                newValue.push(day);
            }
            callback === null || callback === void 0 ? void 0 : callback(newValue, day, modifiers, e);
            return newValue;
        });
    };
    var reset = function () {
        setSelected(initialValue);
    };
    return { selected: selected, onDayClick: onDayClick, reset: reset };
}

;// CONCATENATED MODULE: ./src/hooks/useSelectMultiple/index.ts


;// CONCATENATED MODULE: ./src/types/KeyCode.ts
/** Reference to KeyCodes used inside the app. */
var KeyCode;
(function (KeyCode) {
    KeyCode["ArrowLeft"] = "ArrowLeft";
    KeyCode["ArrowRight"] = "ArrowRight";
    KeyCode["ArrowUp"] = "ArrowUp";
    KeyCode["ArrowDown"] = "ArrowDown";
    KeyCode["Space"] = "Space";
    KeyCode["Enter"] = "Enter";
})(KeyCode || (KeyCode = {}));

;// CONCATENATED MODULE: ./src/types/UIElement.ts
/**
 * Represent an element or an element state of the DayPicker user interface,
 * whose style or class name can be changed using the `styles` or `classNames`
 * prop.
 *
 * ```
 * <DayPicker
 *   classNames={{ captionLast: 'my-custom-class' }}
 *   styles={{ captionLast: { color: 'red' }}}
 * />
 * ```
 */
var UIElement;
(function (UIElement) {
    /** The container element. */
    UIElement["Root"] = "root";
    /** The container element when number of months is greater than 1. */
    UIElement["RootMultipleMonths"] = "rootMultipleMonths";
    /** The caption element (showing the calendar heading and the navigation) */
    UIElement["Caption"] = "caption";
    /** The caption element when the first of multiple months */
    UIElement["CaptionFirst"] = "captionFirst";
    /** The caption element when the last of multiple months */
    UIElement["CaptionLast"] = "captionLast";
    /** The caption element is between */
    UIElement["CaptionBetween"] = "captionBetween";
    /** The container of the drop-downs. */
    UIElement["CaptionDropdowns"] = "dropdownsContainer";
    /** The drop-down select element. */
    UIElement["Dropdown"] = "dropdown";
    /** The container of the caption’s label (e.g. "September 2021"). */
    UIElement["CaptionLabel"] = "dropdownLabel";
    /** The drop-down to change the month. */
    UIElement["DropdownMonth"] = "dropdownMonth";
    /** The drop-down to change the year. */
    UIElement["DropdownYear"] = "dropdownYear";
    /** The icon aside the drop-down. */
    UIElement["DropdownIcon"] = "dropdownIcon";
    /** The wrapper of the months (there may be more months visualized when `numberOfMonths`). */
    UIElement["Months"] = "months";
    /** The wrapper of the table displaying the month. */
    UIElement["Month"] = "month";
    /** The table displaying the calendar. */
    UIElement["Table"] = "table";
    /** The body element of the table displaying the calendar. */
    UIElement["TBody"] = "body";
    /** The head element of the table displaying the calendar. */
    UIElement["Head"] = "head";
    /** The row element of the head. */
    UIElement["HeadRow"] = "headRow";
    /** The cell element of the head. */
    UIElement["HeadCell"] = "headCell";
    /** The navigation element. */
    UIElement["Nav"] = "nav";
    /** A navigation button. */
    UIElement["NavButton"] = "navButton";
    /** The "previous month" navigation button. */
    UIElement["NavButtonPrev"] = "navButtonPrev";
    /** The "next month" navigation button. */
    UIElement["NavButtonNext"] = "navButtonNext";
    /** The icon contained in navigation button. */
    UIElement["NavIcon"] = "navIcon";
    /** A row in the table element (each row shows a week). */
    UIElement["Row"] = "row";
    /** A row head in the table element, used to display the week numbers. */
    UIElement["RowHead"] = "rowHead";
    /** The element containing the week number */
    UIElement["WeekNumber"] = "weekNumber";
    /** The cell containing the day element. */
    UIElement["Cell"] = "cell";
    /** The day element (a button when the day is interactive). */
    UIElement["Day"] = "day";
})(UIElement || (UIElement = {}));

;// CONCATENATED MODULE: ./src/types/index.ts









































// EXTERNAL MODULE: ../../node_modules/date-fns/locale/en-US/index.js
var en_US = __webpack_require__(626);
var en_US_default = /*#__PURE__*/__webpack_require__.n(en_US);
;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultClassNames.ts
var _a;

/**
 * The name of the default CSS classes for the [[UIElements]].
 */
var defaultClassNames = (_a = {},
    /** Root element */
    _a[UIElement.Root] = 'rdp',
    _a[UIElement.RootMultipleMonths] = 'rdp-multiple-months',
    _a[UIElement.Months] = 'rdp-months',
    _a[UIElement.CaptionFirst] = 'rdp-month_first',
    _a[UIElement.CaptionLast] = 'rdp-month_last',
    _a[UIElement.CaptionBetween] = 'rdp-month_between',
    _a[UIElement.Caption] = 'rdp-caption',
    _a[UIElement.CaptionLabel] = 'rdp-caption-label',
    _a[UIElement.CaptionDropdowns] = 'rdp-caption-dropdowns',
    _a[UIElement.Dropdown] = 'rdp-dropdown',
    _a[UIElement.DropdownMonth] = 'rdp-dropdown_month',
    _a[UIElement.DropdownYear] = 'rdp-dropdown_year',
    // Day Component
    _a[UIElement.Day] = 'rdp-day',
    // Month Component
    _a[UIElement.Month] = 'rdp-month',
    _a[UIElement.Table] = 'rdp-table',
    _a[UIElement.TBody] = 'rdp-body',
    // Head Components
    _a[UIElement.Head] = 'rdp-head',
    _a[UIElement.HeadRow] = 'rdp-head-row',
    _a[UIElement.HeadCell] = 'rdp-head-cell',
    // Navigation Component
    _a[UIElement.Nav] = 'rdp-nav',
    _a[UIElement.NavButton] = 'rdp-nav-button',
    _a[UIElement.NavButtonPrev] = 'rdp-nav-button_prev',
    _a[UIElement.NavButtonNext] = 'rdp-nav-button_next',
    _a[UIElement.NavIcon] = 'rdp-nav-icon',
    _a[UIElement.DropdownIcon] = 'rdp-dropdown-icon',
    // Week Component
    _a[UIElement.Row] = 'rdp-row',
    _a[UIElement.RowHead] = 'rdp-row-head',
    _a[UIElement.WeekNumber] = 'rdp-weeknumber',
    _a[UIElement.Cell] = 'rdp-cell',
    _a);

;// CONCATENATED MODULE: ./src/components/Day/utils/getModifiersFromContext.ts
/**
 * Return the modifiers from the context by checking the values of selected,
 * disabled or hidden.
 */
function getModifiersFromContext(context) {
    var modifiers = Object.assign({}, context.modifiers);
    ['selected', 'disabled', 'hidden'].forEach(function (propName) {
        if (context[propName])
            modifiers[propName] = context[propName];
    });
    return modifiers;
}

;// CONCATENATED MODULE: ./src/components/Day/utils/matchAfter.ts

function matchAfter(day, matcher) {
    if (!('after' in matcher) || 'before' in matcher)
        return false;
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(day, matcher.after) > 0;
}

;// CONCATENATED MODULE: ./src/components/Day/utils/matchBefore.ts

function matchBefore(day, matcher) {
    if (!('before' in matcher) || 'after' in matcher)
        return false;
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(day, matcher.before) < 0;
}

;// CONCATENATED MODULE: ./src/components/Day/utils/matchBeforeAndAfter.ts

function matchBeforeAndAfter(day, matcher) {
    if (!('before' in matcher) || !('after' in matcher))
        return false;
    return ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(day, matcher.before) < 0 &&
        (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(day, matcher.after) > 0);
}

;// CONCATENATED MODULE: ./src/components/Day/utils/matchDate.ts

function matchDate(day, matcher) {
    if (!(matcher instanceof Date))
        return false;
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, matcher);
}

;// CONCATENATED MODULE: ./src/components/Day/utils/matchDaysOfWeek.ts
function matchDaysOfWeek(day, matcher) {
    if (!('daysOfWeek' in matcher))
        return false;
    return matcher.daysOfWeek.includes(day.getDay());
}

;// CONCATENATED MODULE: ./src/components/Day/utils/matchFunction.ts
function matchFunction(day, matcher, displayMonth, props) {
    if (!(matcher instanceof Function))
        return false;
    return matcher(day, displayMonth, props);
}

;// CONCATENATED MODULE: ./src/components/Day/utils/matchRange.ts

function matchRange(day, matcher) {
    var _a;
    if (!('from' in matcher))
        return false;
    if (!matcher.from)
        return false;
    var from = matcher.from, to = matcher.to;
    // Matches { from: <Date> }
    if (!to && from && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(from, day))
        return true;
    if (!to)
        return false;
    // Invert the case where "to" is before "from"
    if (matcher.to && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(matcher.to, matcher.from) < 0) {
        _a = [matcher.to, matcher.from], from = _a[0], to = _a[1];
    }
    return ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(day, from) >= 0 &&
        (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(to, day) >= 0);
}

;// CONCATENATED MODULE: ./src/components/Day/utils/isMatch.ts







/**
 * Returns true when the day matches against the given matcher. Supports few
 * basic matchers.
 */
function isMatch(day, matcher, displayMonth, props) {
    if (!matcher)
        return false;
    var matchers;
    if (Array.isArray(matcher)) {
        matchers = matcher;
    }
    else {
        matchers = [matcher];
    }
    return matchers.some(function (dayMatcher) {
        if (!dayMatcher)
            return false;
        return (
        // Precedence shouldn't be important here
        matchDate(day, dayMatcher) ||
            matchBeforeAndAfter(day, dayMatcher) ||
            matchBefore(day, dayMatcher) ||
            matchAfter(day, dayMatcher) ||
            matchRange(day, dayMatcher) ||
            matchDaysOfWeek(day, dayMatcher) ||
            matchFunction(day, dayMatcher, displayMonth, props));
    });
}

;// CONCATENATED MODULE: ./src/components/Day/utils/getModifiersStatus.ts


var reduceCallback = function (day, matchers, displayMonth, context) { return function (previousValue, key) {
    var matcher = matchers[key];
    if (isMatch(day, matcher, displayMonth, context)) {
        previousValue.push(key);
    }
    return previousValue;
}; };
/**
 * Return the status of the modifiers for the given day,
 */
function getModifiersStatus(day, displayMonth, context) {
    var modifierMatchers = getModifiersFromContext(context);
    var modifiersList = Object.keys(modifierMatchers).reduce(reduceCallback(day, modifierMatchers, displayMonth, context), []);
    var modifiers = {};
    modifiersList.forEach(function (modifier) { return (modifiers[modifier] = true); });
    return modifiers;
}

;// CONCATENATED MODULE: ./src/components/Day/Day.tsx
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};





/**
 * Render the content of a date cell, as a button or span element according to
 * its modifiers. Attaches the event handlers from DayPicker context, and manage the
 * focused date.
 */
function Day(props) {
    var el = external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef(null);
    var context = useDayPicker();
    var labels = context.labels, formatters = context.formatters, locale = context.locale, showOutsideDays = context.showOutsideDays;
    var _a = useNavigation(), currentMonth = _a.currentMonth, focusedDay = _a.focusedDay;
    var displayMonth = props.displayMonth, date = props.date;
    var formatDay = formatters.formatDay;
    // Do not return anything if the date is not in the range
    var modifiers = getModifiersStatus(date, displayMonth, context);
    external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect(function () {
        var _a;
        if (!focusedDay)
            return;
        if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(focusedDay, date))
            (_a = el === null || el === void 0 ? void 0 : el.current) === null || _a === void 0 ? void 0 : _a.focus();
    }, [focusedDay]);
    if (modifiers.hidden)
        return external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("span", null);
    if (modifiers.outside && !showOutsideDays)
        return external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("span", null);
    var ariaLabel = labels.dayLabel(date, modifiers, { locale: locale });
    var ariaPressed = modifiers.interactive ? modifiers.selected : undefined;
    var disabled = modifiers.disabled;
    // #region TabIndex
    var tabIndex = !modifiers.interactive ? undefined : -1;
    if (modifiers.interactive) {
        if ((focusedDay && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(date, focusedDay)) ||
            ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameMonth)(date, currentMonth) && date.getDate() === 1)) {
            tabIndex = 0;
        }
    }
    // #endregion
    // #region EventHandlers
    var onDayBlur = context.onDayBlur, onDayClick = context.onDayClick, onDayFocus = context.onDayFocus, onDayKeyDown = context.onDayKeyDown;
    var handleClick = function (e) {
        onDayClick(date, modifiers, e);
    };
    var handleFocus = function (e) {
        onDayFocus(date, modifiers, e);
    };
    var handleBlur = function (e) {
        onDayBlur(date, modifiers, e);
    };
    var handleKeyDown = function (e) {
        onDayKeyDown(date, modifiers, e);
    };
    var handleKeyUp = function (e) {
        var _a;
        (_a = props.onDayKeyUp) === null || _a === void 0 ? void 0 : _a.call(props, date, modifiers, e);
    };
    var handleMouseEnter = function (e) {
        var _a;
        (_a = props.onDayMouseEnter) === null || _a === void 0 ? void 0 : _a.call(props, date, modifiers, e);
    };
    var handleMouseLeave = function (e) {
        var _a;
        (_a = props.onDayMouseLeave) === null || _a === void 0 ? void 0 : _a.call(props, date, modifiers, e);
    };
    var handleTouchCancel = function (e) {
        var _a;
        (_a = props.onDayTouchCancel) === null || _a === void 0 ? void 0 : _a.call(props, date, modifiers, e);
    };
    var handleTouchEnd = function (e) {
        var _a;
        (_a = props.onDayTouchEnd) === null || _a === void 0 ? void 0 : _a.call(props, date, modifiers, e);
    };
    var handleTouchMove = function (e) {
        var _a;
        (_a = props.onDayTouchMove) === null || _a === void 0 ? void 0 : _a.call(props, date, modifiers, e);
    };
    var handleTouchStart = function (e) {
        var _a;
        (_a = props.onDayTouchStart) === null || _a === void 0 ? void 0 : _a.call(props, date, modifiers, e);
    };
    // #endregion
    // #region ClassNames
    // TODO: move in an external utility?
    var classNames = context.classNames, modifiersClassNames = context.modifiersClassNames, modifierPrefix = context.modifierPrefix;
    var buttonClassNames = [classNames[UIElement.Day]];
    Object.keys(modifiers)
        .filter(function (modifier) { return Boolean(modifiers[modifier]); })
        .forEach(function (modifier) {
        if (modifiersClassNames === null || modifiersClassNames === void 0 ? void 0 : modifiersClassNames[modifier]) {
            // Use class name coming from props
            buttonClassNames.push(modifiersClassNames[modifier]);
        }
        else {
            // Create a class name with the prefix
            buttonClassNames.push("" + modifierPrefix + modifier);
        }
    });
    // #endregion
    // #region Styles
    // TODO: move to an external utility?
    var styles = context.styles, modifiersStyles = context.modifiersStyles;
    var style = __assign({}, styles === null || styles === void 0 ? void 0 : styles[UIElement.Day]);
    if (styles) {
        Object.keys(modifiers).forEach(function (modifier) {
            style = __assign(__assign({}, style), styles[modifier]);
        });
    }
    if (modifiersStyles) {
        Object.keys(modifiers).forEach(function (modifier) {
            style = __assign(__assign({}, style), modifiersStyles[modifier]);
        });
    }
    // #endregion
    var Component = modifiers.interactive ? 'button' : 'span';
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Component, { ref: el, "aria-label": ariaLabel, "aria-pressed": ariaPressed, disabled: disabled, style: style, className: buttonClassNames.join(' '), tabIndex: tabIndex, onClick: handleClick, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, onKeyUp: handleKeyUp, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, onTouchCancel: handleTouchCancel, onTouchEnd: handleTouchEnd, onTouchMove: handleTouchMove, onTouchStart: handleTouchStart }, formatDay(date, { locale: locale })));
}

;// CONCATENATED MODULE: ./src/components/IconDropdown/IconDropdown.tsx

/**
 * Render the icon in the styled drop-down.
 */
function IconDropdown(_a) {
    var className = _a.className, style = _a.style;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("svg", { width: "8px", height: "8px", viewBox: "0 0 120 120", className: className, style: style },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("path", { d: "M4.22182541,48.2218254 C8.44222828,44.0014225 15.2388494,43.9273804 19.5496459,47.9996989 L19.7781746,48.2218254 L60,88.443 L100.221825,48.2218254 C104.442228,44.0014225 111.238849,43.9273804 115.549646,47.9996989 L115.778175,48.2218254 C119.998577,52.4422283 120.07262,59.2388494 116.000301,63.5496459 L115.778175,63.7781746 L67.7781746,111.778175 C63.5577717,115.998577 56.7611506,116.07262 52.4503541,112.000301 L52.2218254,111.778175 L4.22182541,63.7781746 C-0.0739418023,59.4824074 -0.0739418023,52.5175926 4.22182541,48.2218254 Z", fill: "currentColor", fillRule: "nonzero" })));
}

;// CONCATENATED MODULE: ./src/components/IconDropdown/index.ts


;// CONCATENATED MODULE: ./src/components/Dropdown/Dropdown.tsx




/**
 * Render a dropdown component (basically, a styled HTMLSelectElement).
 */
function Dropdown(props) {
    var onChange = props.onChange, value = props.value, children = props.children, caption = props.caption, className = props.className, style = props.style;
    var _a = useDayPicker(), classNames = _a.classNames, styles = _a.styles;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: className, style: style },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("select", { className: classNames[UIElement.Dropdown], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Dropdown], value: value, onChange: onChange }, children),
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: classNames[UIElement.CaptionLabel], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.CaptionLabel], "aria-hidden": "true" },
            caption,
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(IconDropdown, { className: classNames[UIElement.DropdownIcon], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.DropdownIcon] }))));
}

;// CONCATENATED MODULE: ./src/components/Dropdown/index.ts


;// CONCATENATED MODULE: ./src/components/Head/utils/getWeekdays.ts

/**
 * Generate a series of 7 days, starting from the week, to use for getting the
 * week day names.
 */
function getWeekdays(locale) {
    var start = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfWeek)(new Date(), { locale: locale });
    var days = [];
    for (var i = 0; i < 7; i++) {
        var day = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(start, i);
        days.push(day);
    }
    return days;
}

;// CONCATENATED MODULE: ./src/components/Head/Head.tsx




/**
 * Render the Head component - i.e. the table head with the weekday names.
 */
function Head() {
    var _a = useDayPicker(), locale = _a.locale, classNames = _a.classNames, styles = _a.styles, labels = _a.labels, showWeekNumber = _a.showWeekNumber, formatWeekdayName = _a.formatters.formatWeekdayName;
    var weekdays = getWeekdays(locale);
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("thead", { style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Head], className: classNames[UIElement.Head] },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tr", { style: styles === null || styles === void 0 ? void 0 : styles[UIElement.HeadRow], className: classNames[UIElement.HeadRow] },
            showWeekNumber && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { style: styles === null || styles === void 0 ? void 0 : styles[UIElement.HeadCell], className: classNames[UIElement.HeadCell] })),
            weekdays.map(function (weekday, i) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { key: i, scope: "col", className: classNames[UIElement.HeadCell], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.HeadCell], "aria-label": labels.weekdayLabel(weekday, { locale: locale }) }, formatWeekdayName(weekday, { locale: locale }))); }))));
}

;// CONCATENATED MODULE: ./src/components/Head/index.ts


;// CONCATENATED MODULE: ./src/components/Row/Row.tsx





/**
 * Render a row in the calendar, with the days and optionally the week number.
 */
function Row(props) {
    var weekNumber = props.weekNumber, dates = props.dates;
    var _a = useDayPicker(), styles = _a.styles, classNames = _a.classNames, showWeekNumber = _a.showWeekNumber, Day = _a.components.Day;
    var weekNumberCell;
    if (showWeekNumber) {
        weekNumberCell = (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { className: classNames[UIElement.RowHead], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.RowHead] },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(WeekNumber, { number: weekNumber, dates: dates })));
    }
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tr", { className: classNames[UIElement.Row], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Row] },
        weekNumberCell,
        dates.map(function (date) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("td", { className: classNames[UIElement.Cell], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Cell], key: (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getUnixTime)(date) },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Day, { displayMonth: props.displayMonth, date: date }))); })));
}

;// CONCATENATED MODULE: ./src/components/Row/index.ts


;// CONCATENATED MODULE: ./src/components/WeekNumber/WeekNumber.tsx



/**
 * Render the week number element. If `onWeekNumberClick` is passed to DayPicker, it
 * renders a button, otherwise a span element.
 */
function WeekNumber(props) {
    var weekNumber = props.number, dates = props.dates;
    var _a = useDayPicker(), styles = _a.styles, classNames = _a.classNames, locale = _a.locale, weekNumberLabel = _a.labels.weekNumberLabel, formatWeekNumber = _a.formatters.formatWeekNumber, onWeekNumberClick = _a.onWeekNumberClick;
    var label = weekNumberLabel(Number(weekNumber), { locale: locale });
    var handleClick = function (e) {
        onWeekNumberClick === null || onWeekNumberClick === void 0 ? void 0 : onWeekNumberClick(weekNumber, dates, e);
    };
    var Component = onWeekNumberClick ? 'button' : 'span';
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Component, { "aria-label": label, className: classNames[UIElement.WeekNumber], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.WeekNumber], onClick: handleClick }, formatWeekNumber(Number(weekNumber), { locale: locale })));
}

;// CONCATENATED MODULE: ./src/components/WeekNumber/index.ts


;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultComponents.ts





/**
 * The default components passed to the `components` prop.
 */
var defaultComponents = {
    Day: Day,
    Dropdown: Dropdown,
    Head: Head,
    Row: Row,
    WeekNumber: WeekNumber
};

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatCaption.ts

function formatCaption(month, options) {
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(month, 'LLLL y', options);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatDay.ts

function formatDay(day, options) {
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(day, 'd', options);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatMonthCaption.ts

function formatMonthCaption(month, options) {
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(month, 'LLLL', options);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatWeekdayName.ts

function formatWeekdayName(weekday, options) {
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(weekday, 'cccccc', options);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatWeekNumber.ts
function formatWeekNumber(weekNumber) {
    return "" + weekNumber;
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatYearCaption.ts

function formatYearCaption(year, options) {
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(year, 'yyyy', options);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultFormatters.ts






var defaultFormatters = {
    formatCaption: formatCaption,
    formatDay: formatDay,
    formatMonthCaption: formatMonthCaption,
    formatWeekdayName: formatWeekdayName,
    formatWeekNumber: formatWeekNumber,
    formatYearCaption: formatYearCaption
};

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultLabels.ts

var defaultLabels = {
    nextLabel: function (month, options) {
        return "Go to next month: " + (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(month, 'LLLL Y', options);
    },
    prevLabel: function (month, options) {
        return "Go to previous month: " + (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(month, 'LLLL Y', options);
    },
    dayLabel: function (day, _, options) {
        return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(day, 'PPPP', options);
    },
    weekdayLabel: function (day, options) {
        return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(day, 'ccc', options);
    },
    weekNumberLabel: function (n) {
        return "Week n. " + n;
    }
};

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultModifiers.ts
/*

The default modifiers matchers assigned to every day. These values are passed to
the `defaultModifiers` prop in DayPicker.tsx.

*/

/** Determines if a day is outside the displayed month.  */
function isOutside(day, displayMonth) {
    return !(0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameMonth)(day, displayMonth);
}
/** Determines if a day, when displayed in a month, is interactive.  */
function isInteractive(day, displayMonth, props) {
    var toDate = props.toDate, fromDate = props.fromDate, enableOutsideDaysClick = props.enableOutsideDaysClick, originalProps = props.originalProps;
    var outside = isOutside(day, displayMonth);
    if (props.mode !== 'uncontrolled' && !outside) {
        return true;
    }
    var hasInteractiveProps = 'onDayClick' in originalProps;
    if (props.mode !== 'uncontrolled') {
        return true;
    }
    else if (hasInteractiveProps) {
        return true;
    }
    // The day is NOT interactive if not in the range specified in the `fromDate`
    // and `toDate` (these values are set also by `fromDay/toDay` and
    // `fromYear/toYear` in the main component.)
    var isAfterToDate = Boolean(toDate && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isAfter)(day, toDate));
    var isBeforeFromDate = Boolean(fromDate && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isBefore)(day, fromDate));
    var isOutsideInteractive = outside
        ? Boolean(enableOutsideDaysClick)
        : false;
    var interactive = !isAfterToDate && !isBeforeFromDate && isOutsideInteractive;
    return interactive;
}
/** Determines if a day is "today". */
function isToday(day, _, props) {
    // User can change the "today" date from props, thus we cannot rely to the
    // date now. The today props defaults to `new Date()` anyway...
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, props.today);
}
var defaultModifiers = {
    interactive: isInteractive,
    outside: isOutside,
    today: isToday
};

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultContext.ts






// eslint-disable-next-line @typescript-eslint/no-empty-function
var noop = function noop() { };
var defaultContext = {
    classNames: defaultClassNames,
    components: defaultComponents,
    formatters: defaultFormatters,
    labels: defaultLabels,
    locale: (en_US_default()),
    modifierPrefix: 'rdp-day_',
    modifiers: defaultModifiers,
    captionLayout: 'buttons',
    numberOfMonths: 1,
    originalProps: {},
    today: new Date(),
    mode: 'single',
    // These will be replaced by proper event handlers in DayPicker.tsx so we can
    // safely use noop here
    onMonthChange: noop,
    onDayBlur: noop,
    onDayClick: noop,
    onDayFocus: noop,
    onDayKeyDown: noop
};

;// CONCATENATED MODULE: ./src/components/DayPicker/DayPickerContext.ts


var DayPickerContext = external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(defaultContext);

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultNavigationContext.ts
var defaultNavigationContext = {
    currentMonth: new Date(),
    displayMonths: [new Date()]
};

;// CONCATENATED MODULE: ./src/components/DayPicker/NavigationContext.ts


/**
 * Context to consume navigation values (such as the current month) in the
 * DayPicker internal components.
 */
var NavigationContext = external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(defaultNavigationContext);

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/getMonthsToRender.ts

function getMonthsToRender(currentMonth, numberOfMonths, _a) {
    var toDate = _a.toDate, fromDate = _a.fromDate, reverseMonths = _a.reverseMonths;
    var start = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(currentMonth);
    var end = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(start, numberOfMonths));
    var monthsDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInMonths)(end, start);
    var months = [];
    for (var i = 0; i < monthsDiff; i++) {
        var nextMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(start, i);
        if (toDate && nextMonth > (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toDate))
            continue;
        if (fromDate && nextMonth < (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromDate))
            continue;
        months.push(nextMonth);
    }
    if (reverseMonths)
        months = months.reverse();
    return months;
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/getNavMonths.ts

/**
 * Returns the next and the previous months that the user can navigate to.
 */
function getNavMonths(month, options) {
    var fromDate = options.fromDate, toDate = options.toDate, pagedNavigation = options.pagedNavigation, numberOfMonths = options.numberOfMonths, disableNavigation = options.disableNavigation;
    if (disableNavigation) {
        return [undefined, undefined];
    }
    var add = pagedNavigation ? numberOfMonths : 1;
    var currentMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month !== null && month !== void 0 ? month : options.today);
    var prevMonth;
    if (!fromDate || currentMonth > (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromDate)) {
        prevMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, add * -1);
    }
    var nextMonth;
    if (!toDate ||
        (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, numberOfMonths) <= (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toDate)) {
        nextMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, add);
    }
    return [prevMonth, nextMonth];
}

;// CONCATENATED MODULE: ./src/components/DayPicker/DayPicker.tsx
var DayPicker_assign = (undefined && undefined.__assign) || function () {
    DayPicker_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return DayPicker_assign.apply(this, arguments);
};












/**
 * Render the date picker component.
 */
function DayPicker(props) {
    var _a, _b;
    //#region Default values
    var mode = (_a = props.mode) !== null && _a !== void 0 ? _a : defaultContext.mode;
    var today = (_b = props.today) !== null && _b !== void 0 ? _b : defaultContext.today;
    var locale = props.locale || defaultContext.locale;
    var numberOfMonths = props.numberOfMonths || defaultContext.numberOfMonths;
    var showOutsideDays = props.showOutsideDays || props.fixedWeeks;
    var modifierPrefix = props.modifierPrefix || defaultContext.modifierPrefix;
    // Give precedence to `fromYear` and `fromMonth`
    var fromDate = props.fromDate;
    if (props.fromMonth)
        fromDate = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(props.fromMonth);
    else if (props.fromYear)
        fromDate = new Date(props.fromYear, 0, 1);
    // Give precedence to `toYear` and `toMonth`
    var toDate = props.toDate;
    if (props.toMonth)
        toDate = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(props.toMonth);
    else if (props.toYear)
        toDate = new Date(props.toYear, 11, 31);
    var captionLayout = props.captionLayout || defaultContext.captionLayout;
    if (captionLayout === 'dropdown' &&
        ((!fromDate && !toDate) || numberOfMonths > 1)) {
        captionLayout = 'buttons';
    }
    //#endregion
    //#region Current month
    // As default, month is controlled by DayPicker, where the initial value is
    // `defaultMonth`. If props.month is passed, then the parent component must
    // control the month via `onMonthChange`.
    var _c = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(!('month' in props)), isMonthControlled = _c[0], setIsMonthControlled = _c[1];
    var _d = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(props.defaultMonth ? (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(props.defaultMonth) : undefined), controlledMonth = _d[0], setControlledMonth = _d[1];
    external_root_React_commonjs2_react_commonjs_react_amd_react_default().useEffect(function () {
        setIsMonthControlled(!('month' in props));
    }, [props.defaultMonth]);
    var currentMonth = controlledMonth || props.month || (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(today);
    var displayMonths = getMonthsToRender(currentMonth, numberOfMonths, {
        toDate: toDate,
        fromDate: fromDate,
        reverseMonths: props.reverseMonths
    });
    //#endregion
    //#region Controlled selection
    // Single select
    var singleSelect = useSelect('single', props.defaultSelected, props.required, props.onSelect);
    // Multiple select
    var multipleSelect = useMultipleSelect('multiple', props.defaultSelected, props.required, props.onSelectMultiple);
    var rangeSelect = useRangeSelect('range', props.defaultSelected, props.required, props.onSelectRange);
    var selected = mode === 'single'
        ? singleSelect.selected
        : mode === 'multiple'
            ? multipleSelect.selected
            : mode === 'range'
                ? rangeSelect.selected
                : props.selected;
    //#endregion
    //#region Focused day
    var _e = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(), focusedDay = _e[0], setFocusedDay = _e[1];
    //#endregion
    //#region From/to date
    //#endregion
    //#region events
    var onMonthChange = function (newMonth, e) {
        var _a;
        // Do nothing if outside of range
        if (toDate && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isAfter)(newMonth, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toDate)))
            return;
        if (fromDate && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isBefore)(newMonth, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromDate)))
            return;
        if (isMonthControlled)
            setControlledMonth(newMonth);
        (_a = props.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(props, newMonth, e);
    };
    var onDayFocus = function (day, modifiers, e) {
        var _a;
        var sameMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameMonth)(day, currentMonth);
        if (!sameMonth && props.disableNavigation)
            return;
        if (!sameMonth)
            onMonthChange((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(day), e);
        setFocusedDay(day);
        (_a = props.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayBlur = function (day, modifiers, e) {
        var _a;
        setFocusedDay(undefined);
        (_a = props.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayClick = function (day, modifiers, e) {
        var _a;
        (_a = props.onDayClick) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
        if (modifiers.outside && !props.enableOutsideDaysClick)
            return;
        if (modifiers.outside)
            setControlledMonth((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(day));
        if (mode === 'single')
            singleSelect.onDayClick(day, modifiers, e);
        if (mode === 'multiple')
            multipleSelect.onDayClick(day, modifiers, e);
        if (mode === 'range')
            rangeSelect.onDayClick(day, modifiers, e);
    };
    var onDayKeyDown = function (day, modifiers, e) {
        var _a;
        switch (e.key) {
            case KeyCode.ArrowLeft: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(day, -1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                break;
            }
            case KeyCode.ArrowRight: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(day, 1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                return;
            }
            case KeyCode.ArrowUp: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addWeeks)(day, -1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                break;
            }
            case KeyCode.ArrowDown: {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addWeeks)(day, 1);
                onDayFocus === null || onDayFocus === void 0 ? void 0 : onDayFocus(nextDay, modifiers, e);
                break;
            }
        }
        (_a = props.onDayKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    //#endregion
    var propsValues = DayPicker_assign(DayPicker_assign({}, props), { captionLayout: captionLayout, classNames: DayPicker_assign(DayPicker_assign({}, defaultContext.classNames), props.classNames), components: DayPicker_assign(DayPicker_assign({}, defaultContext.components), props.components), formatters: DayPicker_assign(DayPicker_assign({}, defaultContext.formatters), props.formatters), labels: DayPicker_assign(DayPicker_assign({}, defaultContext.labels), props.labels), modifiers: DayPicker_assign(DayPicker_assign({}, defaultContext.modifiers), props.modifiers), fromDate: fromDate,
        toDate: toDate,
        locale: locale,
        modifierPrefix: modifierPrefix,
        numberOfMonths: numberOfMonths,
        onDayBlur: onDayBlur,
        onDayClick: onDayClick,
        onDayFocus: onDayFocus,
        onDayKeyDown: onDayKeyDown,
        onMonthChange: onMonthChange,
        selected: selected,
        showOutsideDays: showOutsideDays,
        today: today, originalProps: props });
    var _f = getNavMonths(currentMonth, {
        fromDate: fromDate,
        toDate: toDate,
        pagedNavigation: props.pagedNavigation,
        numberOfMonths: numberOfMonths,
        disableNavigation: props.disableNavigation
    }), prevMonth = _f[0], nextMonth = _f[1];
    var navigationValues = {
        nextMonth: nextMonth,
        prevMonth: prevMonth,
        currentMonth: currentMonth,
        displayMonths: displayMonths,
        focusedDay: focusedDay
    };
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(DayPickerContext.Provider, { value: propsValues },
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(NavigationContext.Provider, { value: navigationValues },
            external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Root, null))));
}

;// CONCATENATED MODULE: ./src/components/DayPicker/index.ts




;// CONCATENATED MODULE: ./src/hooks/useDayPicker/useDayPicker.ts


/**
 * An hook for using the DayPicker context used for rendering the internal
 * components.
 */
function useDayPicker() {
    return external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(DayPickerContext);
}

;// CONCATENATED MODULE: ./src/hooks/useDayPicker/index.ts


;// CONCATENATED MODULE: ./src/hooks/index.ts





;// CONCATENATED MODULE: ./src/components/Caption/Caption.tsx




/**
 * Render the caption of a month, which includes title and navigation buttons.
 * The caption has a different layout when setting the `numberOfMonths` prop.
 */
function Caption(props) {
    var displayMonth = props.displayMonth, isFirst = props.isFirst, isLast = props.isLast, isBetween = props.isBetween;
    var _a = useDayPicker(), dir = _a.dir, classNames = _a.classNames, styles = _a.styles, captionLayout = _a.captionLayout, locale = _a.locale, numberOfMonths = _a.numberOfMonths, onMonthChange = _a.onMonthChange, labels = _a.labels, formatCaption = _a.formatters.formatCaption, disableNavigation = _a.disableNavigation;
    var _b = useNavigation(), prevMonth = _b.prevMonth, nextMonth = _b.nextMonth;
    var onPrevClick = function (e) {
        if (!prevMonth)
            return;
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(prevMonth, e);
    };
    var onNextClick = function (e) {
        if (!nextMonth)
            return;
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(nextMonth, e);
    };
    var prevButton = (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("button", { key: "prev", "aria-label": prevMonth && labels.prevLabel(prevMonth, { locale: locale }), className: [classNames[UIElement.NavButton], classNames[UIElement.NavButtonPrev]].join(' '), disabled: !prevMonth, onClick: dir === 'rtl' ? onNextClick : onPrevClick, style: styles === null || styles === void 0 ? void 0 : styles[UIElement.NavButtonPrev] },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(IconPrev, { className: classNames[UIElement.NavIcon], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.NavIcon] })));
    var nextButton = (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("button", { key: "next", "aria-label": nextMonth && labels.nextLabel(nextMonth, { locale: locale }), className: [classNames[UIElement.NavButton], classNames[UIElement.NavButtonNext]].join(' '), disabled: !nextMonth, onClick: dir === 'rtl' ? onPrevClick : onNextClick, style: styles === null || styles === void 0 ? void 0 : styles[UIElement.NavButtonNext] },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(IconNext, { className: classNames[UIElement.NavIcon], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.NavIcon] })));
    var caption = (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { key: "caption", className: classNames[UIElement.CaptionLabel], "aria-live": "polite" }, formatCaption(displayMonth, { locale: locale })));
    var buttons = [prevButton, nextButton];
    if (dir === 'rtl')
        buttons.reverse();
    if (isFirst)
        buttons = [prevButton]; // show only the prev button"
    if (isLast)
        buttons = [nextButton]; // show only the next button"
    if (isBetween)
        buttons = []; // do not show buttons at all
    var nav = (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("span", { key: "nav", className: classNames[UIElement.Nav], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Nav] }, buttons));
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: classNames[UIElement.Caption], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Caption] }, disableNavigation ? (caption) : (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_.Fragment, null,
        captionLayout === 'dropdown' && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: classNames[UIElement.CaptionDropdowns], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.CaptionDropdowns] },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(MonthsDropdown, { displayMonth: displayMonth }),
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(YearsDropdown, { displayMonth: displayMonth }))),
        captionLayout === 'buttons' &&
            numberOfMonths === 1 && [caption, nav],
        captionLayout === 'buttons' && isFirst && [nav, caption],
        captionLayout === 'buttons' && isLast && [caption, nav],
        captionLayout === 'buttons' && isBetween && caption))));
}

;// CONCATENATED MODULE: ./src/components/Caption/index.ts


;// CONCATENATED MODULE: ./src/components/Day/index.ts



;// CONCATENATED MODULE: ./src/components/IconNext/IconNext.tsx

/**
 * Render the "next month" button in the navigation.
 */
function IconNext(_a) {
    var className = _a.className, style = _a.style;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("svg", { width: "16px", height: "16px", viewBox: "0 0 120 120", className: className, style: style },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("path", { d: "M49.8040405,3.34314575 C46.6798462,0.218951416 41.6145263,0.218951416 38.490332,3.34314575 C35.4326099,6.40086786 35.367552,11.3179931 38.2951583,14.4548388 L38.490332,14.6568542 L83.8333725,60 L38.490332,105.343146 C35.4326099,108.400868 35.367552,113.317993 38.2951583,116.454839 L38.490332,116.656854 C41.5480541,119.714576 46.4651794,119.779634 49.602025,116.852028 L49.8040405,116.656854 L100.804041,65.6568542 C103.861763,62.5991321 103.926821,57.6820069 100.999214,54.5451612 L100.804041,54.3431458 L49.8040405,3.34314575 Z", fill: "currentColor" })));
}

;// CONCATENATED MODULE: ./src/components/IconNext/index.ts


;// CONCATENATED MODULE: ./src/components/IconPrev/IconPrev.tsx

/**
 * Render the "previous month" button in the navigation.
 */
function IconPrev(_a) {
    var className = _a.className, style = _a.style;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_.Fragment, null,
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("svg", { width: "16px", height: "16px", viewBox: "0 0 120 120", className: className, style: style },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("path", { d: "M69.490332,3.34314575 C72.6145263,0.218951416 77.6798462,0.218951416 80.8040405,3.34314575 C83.8617626,6.40086786 83.9268205,11.3179931 80.9992143,14.4548388 L80.8040405,14.6568542 L35.461,60 L80.8040405,105.343146 C83.8617626,108.400868 83.9268205,113.317993 80.9992143,116.454839 L80.8040405,116.656854 C77.7463184,119.714576 72.8291931,119.779634 69.6923475,116.852028 L69.490332,116.656854 L18.490332,65.6568542 C15.4326099,62.5991321 15.367552,57.6820069 18.2951583,54.5451612 L18.490332,54.3431458 L69.490332,3.34314575 Z", fill: "currentColor", fillRule: "nonzero" }))));
}

;// CONCATENATED MODULE: ./src/components/IconPrev/index.ts


;// CONCATENATED MODULE: ./src/components/MonthsDropdown/MonthsDropdown.tsx




/**
 * Render the dropdown to navigate between months.
 */
function MonthsDropdown(props) {
    var displayMonth = props.displayMonth;
    var _a = useDayPicker(), locale = _a.locale, onMonthChange = _a.onMonthChange, fromDate = _a.fromDate, toDate = _a.toDate, classNames = _a.classNames, styles = _a.styles, Dropdown = _a.components.Dropdown, formatMonthCaption = _a.formatters.formatMonthCaption;
    var dropdownMonths = [];
    if (fromDate && toDate) {
        if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameYear)(fromDate, toDate)) {
            // only display the months included in the range
            for (var month = fromDate.getMonth(); month <= toDate.getMonth(); month++) {
                dropdownMonths.push((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.setMonth)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromDate), month));
            }
        }
        else {
            // display all the 12 months
            for (var month = 0; month <= 11; month++) {
                var anyDate = new Date(); // any date is OK, we just need the year
                dropdownMonths.push((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.setMonth)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(anyDate), month));
            }
        }
    }
    var handleChange = function (e) {
        var newMonth = new Date(displayMonth);
        newMonth.setMonth(Number(e.target.value));
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(newMonth, e);
    };
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Dropdown, { className: classNames[UIElement.DropdownMonth], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.DropdownMonth], onChange: handleChange, value: displayMonth.getMonth(), caption: formatMonthCaption(displayMonth, { locale: locale }) }, dropdownMonths.map(function (m) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("option", { key: m.getMonth(), value: m.getMonth() }, formatMonthCaption(m, { locale: locale }))); })));
}

;// CONCATENATED MODULE: ./src/components/MonthsDropdown/index.ts


;// CONCATENATED MODULE: ./src/components/Root/Root.tsx
var Root_assign = (undefined && undefined.__assign) || function () {
    Root_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Root_assign.apply(this, arguments);
};




/**
 * Render the container with the months and their captions. The number of months
 * rendered depends by the `numberOfMonths` prop.
 */
function Root(props) {
    var className = props.className, style = props.style;
    var _a = useDayPicker(), dir = _a.dir, classNames = _a.classNames, styles = _a.styles, numberOfMonths = _a.numberOfMonths;
    var displayMonths = useNavigation().displayMonths;
    var rootClassNames = [classNames[UIElement.Root]];
    if (numberOfMonths > 1) {
        rootClassNames.push(classNames[UIElement.RootMultipleMonths]);
    }
    if (className)
        rootClassNames.concat(className.split(' '));
    var renderMonth = function (displayMonth, displayIndex) {
        var _a;
        var className = [classNames[UIElement.Month]];
        // When numberOfMonths > 1, keep track of the position of this month between
        // the other – so that we can style them better and give a different layout.
        var isFirst = numberOfMonths > 1 && displayIndex === 0;
        var isLast = numberOfMonths > 1 && displayIndex === displayMonths.length - 1;
        if (dir === 'rtl')
            _a = [isFirst, isLast], isLast = _a[0], isFirst = _a[1];
        var isBetween = numberOfMonths > 1 && !isFirst && !isLast;
        if (isFirst)
            className.push(classNames[UIElement.CaptionFirst]);
        if (isLast)
            className.push(classNames[UIElement.CaptionLast]);
        if (isBetween)
            className.push(classNames[UIElement.CaptionBetween]);
        return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: className.join(' '), key: displayIndex },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Caption, { displayMonth: displayMonth, displayIndex: displayIndex, isFirst: isFirst, isLast: isLast, isBetween: isBetween }),
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Table, { displayMonth: displayMonth })));
    };
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: rootClassNames.join(' '), style: Root_assign(Root_assign({}, styles === null || styles === void 0 ? void 0 : styles[UIElement.Root]), style), dir: dir },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", { className: classNames[UIElement.Months], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Months] }, displayMonths.map(renderMonth))));
}

;// CONCATENATED MODULE: ./src/components/Root/index.ts


;// CONCATENATED MODULE: ./src/components/Table/utils/getOutsideEndDays.ts

function getOutsideEndDays(month, options) {
    var days = [];
    var lastDayOfWeek = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfWeek)(month, options);
    var endDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(lastDayOfWeek, month);
    for (var i = 1; i <= endDiff; i++) {
        var dayDate = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(month, i);
        days.push(dayDate);
    }
    return days;
}

;// CONCATENATED MODULE: ./src/components/Table/utils/getOutsideStartDays.ts

function getOutsideStartDays(month, options) {
    var days = [];
    var firstDayOfWeek = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfWeek)(month, options);
    var startDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(month, firstDayOfWeek);
    for (var i = 0; i < startDiff; i++) {
        var newDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(firstDayOfWeek, i);
        days.push(newDay);
    }
    return days;
}

;// CONCATENATED MODULE: ./src/components/Table/utils/getWeeks.ts



/**
 * Return the weeks belonging to the given month.
 */
function getWeeks(month, _a) {
    var locale = _a.locale, fixedWeeks = _a.fixedWeeks;
    var monthStart = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month);
    var monthEnd = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfMonth)(month);
    var diff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)(monthEnd, monthStart);
    var weeks = {};
    var lastWeekStr = '';
    for (var i = 0; i <= diff; i++) {
        var date = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(monthStart, i);
        var week = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeek)(date, { locale: locale });
        if (week === 1 && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getMonth)(date) === 11) {
            week = 53;
        }
        var weekStr = week.toString();
        if (!weeks[weekStr]) {
            var startDays = getOutsideStartDays(date, { locale: locale });
            // Create a new week by adding outside start days
            weeks[weekStr] = startDays;
        }
        weeks[weekStr].push(date);
        lastWeekStr = weekStr;
    }
    var lastWeek = weeks[lastWeekStr];
    var lastDay = lastWeek[lastWeek.length - 1];
    var endDays = getOutsideEndDays(lastDay, { locale: locale });
    weeks[lastWeekStr] = lastWeek.concat(endDays);
    // Add extra weeks to the month, up to 6 weeks
    if (fixedWeeks) {
        lastWeek = weeks[lastWeekStr];
        var lastWeekDate = lastWeek[lastWeek.length - 1];
        var weeksInMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeeksInMonth)(month, { locale: locale });
        if (weeksInMonth < 6) {
            var diffDays = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInCalendarDays)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addWeeks)(lastWeekDate, 6 - weeksInMonth), lastWeekDate);
            for (var i = 0; i < diffDays; i++) {
                var date = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(lastWeekDate, i + 1);
                var week = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeek)(date, { locale: locale });
                if (week === 1 && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getMonth)(month) === 11) {
                    week = 53;
                }
                if (!weeks[week]) {
                    weeks[week] = [];
                }
                weeks[week.toString()].push(date);
            }
        }
    }
    return weeks;
}

;// CONCATENATED MODULE: ./src/components/Table/Table.tsx





/**
 * Render the table with the calendar.
 */
function Table(props) {
    var _a = useDayPicker(), locale = _a.locale, fixedWeeks = _a.fixedWeeks, classNames = _a.classNames, styles = _a.styles, hideHead = _a.hideHead, Row = _a.components.Row;
    var weeks = getWeeks(props.displayMonth, { locale: locale, fixedWeeks: fixedWeeks });
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("table", { className: classNames[UIElement.Table], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.Table] },
        !hideHead && external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Head, null),
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tbody", { className: classNames[UIElement.TBody], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.TBody] }, Object.keys(weeks).map(function (weekNumber) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Row, { displayMonth: props.displayMonth, key: weekNumber, dates: weeks[weekNumber], weekNumber: Number(weekNumber) })); }))));
}

;// CONCATENATED MODULE: ./src/components/Table/index.ts


;// CONCATENATED MODULE: ./src/components/YearsDropdown/YearsDropdown.tsx




/**
 * Render a dropdown to change the year. Take in account the `fromDate` and
 * `toDate` from context.
 */
function YearsDropdown(props) {
    var displayMonth = props.displayMonth;
    var _a = useDayPicker(), locale = _a.locale, onMonthChange = _a.onMonthChange, fromDate = _a.fromDate, toDate = _a.toDate, classNames = _a.classNames, styles = _a.styles, Dropdown = _a.components.Dropdown, formatYearCaption = _a.formatters.formatYearCaption;
    var years = [];
    if (fromDate && toDate) {
        for (var year = fromDate.getFullYear(); year <= toDate.getFullYear(); year++) {
            var anyDate = new Date(); // any date is OK, we just need the year
            years.push((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.setYear)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfYear)(anyDate), year));
        }
    }
    var handleChange = function (e) {
        var newMonth = new Date(displayMonth);
        newMonth.setFullYear(Number(e.target.value));
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(newMonth, e);
    };
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Dropdown, { className: classNames[UIElement.DropdownMonth], style: styles === null || styles === void 0 ? void 0 : styles[UIElement.DropdownMonth], onChange: handleChange, value: displayMonth.getMonth(), caption: formatYearCaption(displayMonth, { locale: locale }) }, years.map(function (year) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("option", { key: year.getFullYear(), value: year.getFullYear() }, formatYearCaption(year, { locale: locale }))); })));
}

;// CONCATENATED MODULE: ./src/components/YearsDropdown/index.ts


;// CONCATENATED MODULE: ./src/components/index.ts















;// CONCATENATED MODULE: ./src/index.ts




})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=index.js.map